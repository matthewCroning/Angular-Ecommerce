{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\Matth\\\\workspace\\\\angular-ecommerce\\\\client\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\n\nconst path = require('path');\n\nconst locatePath = require('locate-path');\n\nconst pathExists = require('path-exists');\n\nconst stop = Symbol('findUp.stop');\n\nmodule.exports = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (name, options = {}) {\n    let directory = path.resolve(options.cwd || '');\n    const {\n      root\n    } = path.parse(directory);\n    const paths = [].concat(name);\n\n    const runMatcher = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* (locateOptions) {\n        if (typeof name !== 'function') {\n          return locatePath(paths, locateOptions);\n        }\n\n        const foundPath = yield name(locateOptions.cwd);\n\n        if (typeof foundPath === 'string') {\n          return locatePath([foundPath], locateOptions);\n        }\n\n        return foundPath;\n      });\n\n      return function runMatcher(_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }(); // eslint-disable-next-line no-constant-condition\n\n\n    while (true) {\n      // eslint-disable-next-line no-await-in-loop\n      const foundPath = yield runMatcher({ ...options,\n        cwd: directory\n      });\n\n      if (foundPath === stop) {\n        return;\n      }\n\n      if (foundPath) {\n        return path.resolve(directory, foundPath);\n      }\n\n      if (directory === root) {\n        return;\n      }\n\n      directory = path.dirname(directory);\n    }\n  });\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nmodule.exports.sync = (name, options = {}) => {\n  let directory = path.resolve(options.cwd || '');\n  const {\n    root\n  } = path.parse(directory);\n  const paths = [].concat(name);\n\n  const runMatcher = locateOptions => {\n    if (typeof name !== 'function') {\n      return locatePath.sync(paths, locateOptions);\n    }\n\n    const foundPath = name(locateOptions.cwd);\n\n    if (typeof foundPath === 'string') {\n      return locatePath.sync([foundPath], locateOptions);\n    }\n\n    return foundPath;\n  }; // eslint-disable-next-line no-constant-condition\n\n\n  while (true) {\n    const foundPath = runMatcher({ ...options,\n      cwd: directory\n    });\n\n    if (foundPath === stop) {\n      return;\n    }\n\n    if (foundPath) {\n      return path.resolve(directory, foundPath);\n    }\n\n    if (directory === root) {\n      return;\n    }\n\n    directory = path.dirname(directory);\n  }\n};\n\nmodule.exports.exists = pathExists;\nmodule.exports.sync.exists = pathExists.sync;\nmodule.exports.stop = stop;","map":{"version":3,"sources":["C:/Users/Matth/workspace/node_modules/find-up/index.js"],"names":["path","require","locatePath","pathExists","stop","Symbol","module","exports","name","options","directory","resolve","cwd","root","parse","paths","concat","runMatcher","locateOptions","foundPath","dirname","sync","exists"],"mappings":"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","sourcesContent":["'use strict';\nconst path = require('path');\nconst locatePath = require('locate-path');\nconst pathExists = require('path-exists');\n\nconst stop = Symbol('findUp.stop');\n\nmodule.exports = async (name, options = {}) => {\n\tlet directory = path.resolve(options.cwd || '');\n\tconst {root} = path.parse(directory);\n\tconst paths = [].concat(name);\n\n\tconst runMatcher = async locateOptions => {\n\t\tif (typeof name !== 'function') {\n\t\t\treturn locatePath(paths, locateOptions);\n\t\t}\n\n\t\tconst foundPath = await name(locateOptions.cwd);\n\t\tif (typeof foundPath === 'string') {\n\t\t\treturn locatePath([foundPath], locateOptions);\n\t\t}\n\n\t\treturn foundPath;\n\t};\n\n\t// eslint-disable-next-line no-constant-condition\n\twhile (true) {\n\t\t// eslint-disable-next-line no-await-in-loop\n\t\tconst foundPath = await runMatcher({...options, cwd: directory});\n\n\t\tif (foundPath === stop) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (foundPath) {\n\t\t\treturn path.resolve(directory, foundPath);\n\t\t}\n\n\t\tif (directory === root) {\n\t\t\treturn;\n\t\t}\n\n\t\tdirectory = path.dirname(directory);\n\t}\n};\n\nmodule.exports.sync = (name, options = {}) => {\n\tlet directory = path.resolve(options.cwd || '');\n\tconst {root} = path.parse(directory);\n\tconst paths = [].concat(name);\n\n\tconst runMatcher = locateOptions => {\n\t\tif (typeof name !== 'function') {\n\t\t\treturn locatePath.sync(paths, locateOptions);\n\t\t}\n\n\t\tconst foundPath = name(locateOptions.cwd);\n\t\tif (typeof foundPath === 'string') {\n\t\t\treturn locatePath.sync([foundPath], locateOptions);\n\t\t}\n\n\t\treturn foundPath;\n\t};\n\n\t// eslint-disable-next-line no-constant-condition\n\twhile (true) {\n\t\tconst foundPath = runMatcher({...options, cwd: directory});\n\n\t\tif (foundPath === stop) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (foundPath) {\n\t\t\treturn path.resolve(directory, foundPath);\n\t\t}\n\n\t\tif (directory === root) {\n\t\t\treturn;\n\t\t}\n\n\t\tdirectory = path.dirname(directory);\n\t}\n};\n\nmodule.exports.exists = pathExists;\n\nmodule.exports.sync.exists = pathExists.sync;\n\nmodule.exports.stop = stop;\n"]},"metadata":{},"sourceType":"script"}