{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\Matth\\\\workspace\\\\angular-ecommerce\\\\client\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Touchscreen = exports.Mouse = exports.Keyboard = void 0;\n\nconst assert_js_1 = require(\"./assert.js\");\n\nconst USKeyboardLayout_js_1 = require(\"./USKeyboardLayout.js\");\n/**\n * Keyboard provides an api for managing a virtual keyboard.\n * The high level api is {@link Keyboard.\"type\"},\n * which takes raw characters and generates proper keydown, keypress/input,\n * and keyup events on your page.\n *\n * @remarks\n * For finer control, you can use {@link Keyboard.down},\n * {@link Keyboard.up}, and {@link Keyboard.sendCharacter}\n * to manually fire events as if they were generated from a real keyboard.\n *\n * On MacOS, keyboard shortcuts like `⌘ A` -\\> Select All do not work.\n * See {@link https://github.com/puppeteer/puppeteer/issues/1313 | #1313}.\n *\n * @example\n * An example of holding down `Shift` in order to select and delete some text:\n * ```js\n * await page.keyboard.type('Hello World!');\n * await page.keyboard.press('ArrowLeft');\n *\n * await page.keyboard.down('Shift');\n * for (let i = 0; i < ' World'.length; i++)\n *   await page.keyboard.press('ArrowLeft');\n * await page.keyboard.up('Shift');\n *\n * await page.keyboard.press('Backspace');\n * // Result text will end up saying 'Hello!'\n * ```\n *\n * @example\n * An example of pressing `A`\n * ```js\n * await page.keyboard.down('Shift');\n * await page.keyboard.press('KeyA');\n * await page.keyboard.up('Shift');\n * ```\n *\n * @public\n */\n\n\nclass Keyboard {\n  /** @internal */\n  constructor(client) {\n    /** @internal */\n    this._modifiers = 0;\n    this._pressedKeys = new Set();\n    this._client = client;\n  }\n  /**\n   * Dispatches a `keydown` event.\n   *\n   * @remarks\n   * If `key` is a single character and no modifier keys besides `Shift`\n   * are being held down, a `keypress`/`input` event will also generated.\n   * The `text` option can be specified to force an input event to be generated.\n   * If `key` is a modifier key, `Shift`, `Meta`, `Control`, or `Alt`,\n   * subsequent key presses will be sent with that modifier active.\n   * To release the modifier key, use {@link Keyboard.up}.\n   *\n   * After the key is pressed once, subsequent calls to\n   * {@link Keyboard.down} will have\n   * {@link https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/repeat | repeat}\n   * set to true. To release the key, use {@link Keyboard.up}.\n   *\n   * Modifier keys DO influence {@link Keyboard.down}.\n   * Holding down `Shift` will type the text in upper case.\n   *\n   * @param key - Name of key to press, such as `ArrowLeft`.\n   * See {@link KeyInput} for a list of all key names.\n   *\n   * @param options - An object of options. Accepts text which, if specified,\n   * generates an input event with this text.\n   */\n\n\n  down(key, options = {\n    text: undefined\n  }) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const description = _this._keyDescriptionForString(key);\n\n      const autoRepeat = _this._pressedKeys.has(description.code);\n\n      _this._pressedKeys.add(description.code);\n\n      _this._modifiers |= _this._modifierBit(description.key);\n      const text = options.text === undefined ? description.text : options.text;\n      yield _this._client.send('Input.dispatchKeyEvent', {\n        type: text ? 'keyDown' : 'rawKeyDown',\n        modifiers: _this._modifiers,\n        windowsVirtualKeyCode: description.keyCode,\n        code: description.code,\n        key: description.key,\n        text: text,\n        unmodifiedText: text,\n        autoRepeat,\n        location: description.location,\n        isKeypad: description.location === 3\n      });\n    })();\n  }\n\n  _modifierBit(key) {\n    if (key === 'Alt') return 1;\n    if (key === 'Control') return 2;\n    if (key === 'Meta') return 4;\n    if (key === 'Shift') return 8;\n    return 0;\n  }\n\n  _keyDescriptionForString(keyString) {\n    const shift = this._modifiers & 8;\n    const description = {\n      key: '',\n      keyCode: 0,\n      code: '',\n      text: '',\n      location: 0\n    };\n    const definition = USKeyboardLayout_js_1.keyDefinitions[keyString];\n    assert_js_1.assert(definition, `Unknown key: \"${keyString}\"`);\n    if (definition.key) description.key = definition.key;\n    if (shift && definition.shiftKey) description.key = definition.shiftKey;\n    if (definition.keyCode) description.keyCode = definition.keyCode;\n    if (shift && definition.shiftKeyCode) description.keyCode = definition.shiftKeyCode;\n    if (definition.code) description.code = definition.code;\n    if (definition.location) description.location = definition.location;\n    if (description.key.length === 1) description.text = description.key;\n    if (definition.text) description.text = definition.text;\n    if (shift && definition.shiftText) description.text = definition.shiftText; // if any modifiers besides shift are pressed, no text should be sent\n\n    if (this._modifiers & ~8) description.text = '';\n    return description;\n  }\n  /**\n   * Dispatches a `keyup` event.\n   *\n   * @param key - Name of key to release, such as `ArrowLeft`.\n   * See {@link KeyInput | KeyInput}\n   * for a list of all key names.\n   */\n\n\n  up(key) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const description = _this2._keyDescriptionForString(key);\n\n      _this2._modifiers &= ~_this2._modifierBit(description.key);\n\n      _this2._pressedKeys.delete(description.code);\n\n      yield _this2._client.send('Input.dispatchKeyEvent', {\n        type: 'keyUp',\n        modifiers: _this2._modifiers,\n        key: description.key,\n        windowsVirtualKeyCode: description.keyCode,\n        code: description.code,\n        location: description.location\n      });\n    })();\n  }\n  /**\n   * Dispatches a `keypress` and `input` event.\n   * This does not send a `keydown` or `keyup` event.\n   *\n   * @remarks\n   * Modifier keys DO NOT effect {@link Keyboard.sendCharacter | Keyboard.sendCharacter}.\n   * Holding down `Shift` will not type the text in upper case.\n   *\n   * @example\n   * ```js\n   * page.keyboard.sendCharacter('嗨');\n   * ```\n   *\n   * @param char - Character to send into the page.\n   */\n\n\n  sendCharacter(char) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this3._client.send('Input.insertText', {\n        text: char\n      });\n    })();\n  }\n\n  charIsKey(char) {\n    return !!USKeyboardLayout_js_1.keyDefinitions[char];\n  }\n  /**\n   * Sends a `keydown`, `keypress`/`input`,\n   * and `keyup` event for each character in the text.\n   *\n   * @remarks\n   * To press a special key, like `Control` or `ArrowDown`,\n   * use {@link Keyboard.press}.\n   *\n   * Modifier keys DO NOT effect `keyboard.type`.\n   * Holding down `Shift` will not type the text in upper case.\n   *\n   * @example\n   * ```js\n   * await page.keyboard.type('Hello'); // Types instantly\n   * await page.keyboard.type('World', {delay: 100}); // Types slower, like a user\n   * ```\n   *\n   * @param text - A text to type into a focused element.\n   * @param options - An object of options. Accepts delay which,\n   * if specified, is the time to wait between `keydown` and `keyup` in milliseconds.\n   * Defaults to 0.\n   */\n\n\n  type(text, options = {}) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      const delay = options.delay || null;\n\n      for (const char of text) {\n        if (_this4.charIsKey(char)) {\n          yield _this4.press(char, {\n            delay\n          });\n        } else {\n          if (delay) yield new Promise(f => setTimeout(f, delay));\n          yield _this4.sendCharacter(char);\n        }\n      }\n    })();\n  }\n  /**\n   * Shortcut for {@link Keyboard.down}\n   * and {@link Keyboard.up}.\n   *\n   * @remarks\n   * If `key` is a single character and no modifier keys besides `Shift`\n   * are being held down, a `keypress`/`input` event will also generated.\n   * The `text` option can be specified to force an input event to be generated.\n   *\n   * Modifier keys DO effect {@link Keyboard.press}.\n   * Holding down `Shift` will type the text in upper case.\n   *\n   * @param key - Name of key to press, such as `ArrowLeft`.\n   * See {@link KeyInput} for a list of all key names.\n   *\n   * @param options - An object of options. Accepts text which, if specified,\n   * generates an input event with this text. Accepts delay which,\n   * if specified, is the time to wait between `keydown` and `keyup` in milliseconds.\n   * Defaults to 0.\n   */\n\n\n  press(key, options = {}) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        delay = null\n      } = options;\n      yield _this5.down(key, options);\n      if (delay) yield new Promise(f => setTimeout(f, options.delay));\n      yield _this5.up(key);\n    })();\n  }\n\n}\n\nexports.Keyboard = Keyboard;\n/**\n * The Mouse class operates in main-frame CSS pixels\n * relative to the top-left corner of the viewport.\n * @remarks\n * Every `page` object has its own Mouse, accessible with [`page.mouse`](#pagemouse).\n *\n * @example\n * ```js\n * // Using ‘page.mouse’ to trace a 100x100 square.\n * await page.mouse.move(0, 0);\n * await page.mouse.down();\n * await page.mouse.move(0, 100);\n * await page.mouse.move(100, 100);\n * await page.mouse.move(100, 0);\n * await page.mouse.move(0, 0);\n * await page.mouse.up();\n * ```\n *\n * **Note**: The mouse events trigger synthetic `MouseEvent`s.\n * This means that it does not fully replicate the functionality of what a normal user\n * would be able to do with their mouse.\n *\n * For example, dragging and selecting text is not possible using `page.mouse`.\n * Instead, you can use the {@link https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot/getSelection | `DocumentOrShadowRoot.getSelection()`} functionality implemented in the platform.\n *\n * @example\n * For example, if you want to select all content between nodes:\n * ```js\n * await page.evaluate((from, to) => {\n *   const selection = from.getRootNode().getSelection();\n *   const range = document.createRange();\n *   range.setStartBefore(from);\n *   range.setEndAfter(to);\n *   selection.removeAllRanges();\n *   selection.addRange(range);\n * }, fromJSHandle, toJSHandle);\n * ```\n * If you then would want to copy-paste your selection, you can use the clipboard api:\n * ```js\n * // The clipboard api does not allow you to copy, unless the tab is focused.\n * await page.bringToFront();\n * await page.evaluate(() => {\n *   // Copy the selected content to the clipboard\n *   document.execCommand('copy');\n *   // Obtain the content of the clipboard as a string\n *   return navigator.clipboard.readText();\n * });\n * ```\n * **Note**: If you want access to the clipboard API,\n * you have to give it permission to do so:\n * ```js\n * await browser.defaultBrowserContext().overridePermissions(\n *   '<your origin>', ['clipboard-read', 'clipboard-write']\n * );\n * ```\n * @public\n */\n\nclass Mouse {\n  /**\n   * @internal\n   */\n  constructor(client, keyboard) {\n    this._x = 0;\n    this._y = 0;\n    this._button = 'none';\n    this._client = client;\n    this._keyboard = keyboard;\n  }\n  /**\n   * Dispatches a `mousemove` event.\n   * @param x - Horizontal position of the mouse.\n   * @param y - Vertical position of the mouse.\n   * @param options - Optional object. If specified, the `steps` property\n   * sends intermediate `mousemove` events when set to `1` (default).\n   */\n\n\n  move(x, y, options = {}) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        steps = 1\n      } = options;\n      const fromX = _this6._x,\n            fromY = _this6._y;\n      _this6._x = x;\n      _this6._y = y;\n\n      for (let i = 1; i <= steps; i++) {\n        yield _this6._client.send('Input.dispatchMouseEvent', {\n          type: 'mouseMoved',\n          button: _this6._button,\n          x: fromX + (_this6._x - fromX) * (i / steps),\n          y: fromY + (_this6._y - fromY) * (i / steps),\n          modifiers: _this6._keyboard._modifiers\n        });\n      }\n    })();\n  }\n  /**\n   * Shortcut for `mouse.move`, `mouse.down` and `mouse.up`.\n   * @param x - Horizontal position of the mouse.\n   * @param y - Vertical position of the mouse.\n   * @param options - Optional `MouseOptions`.\n   */\n\n\n  click(x, y, options = {}) {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        delay = null\n      } = options;\n\n      if (delay !== null) {\n        yield _this7.move(x, y);\n        yield _this7.down(options);\n        yield new Promise(f => setTimeout(f, delay));\n        yield _this7.up(options);\n      } else {\n        yield _this7.move(x, y);\n        yield _this7.down(options);\n        yield _this7.up(options);\n      }\n    })();\n  }\n  /**\n   * Dispatches a `mousedown` event.\n   * @param options - Optional `MouseOptions`.\n   */\n\n\n  down(options = {}) {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        button = 'left',\n        clickCount = 1\n      } = options;\n      _this8._button = button;\n      yield _this8._client.send('Input.dispatchMouseEvent', {\n        type: 'mousePressed',\n        button,\n        x: _this8._x,\n        y: _this8._y,\n        modifiers: _this8._keyboard._modifiers,\n        clickCount\n      });\n    })();\n  }\n  /**\n   * Dispatches a `mouseup` event.\n   * @param options - Optional `MouseOptions`.\n   */\n\n\n  up(options = {}) {\n    var _this9 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        button = 'left',\n        clickCount = 1\n      } = options;\n      _this9._button = 'none';\n      yield _this9._client.send('Input.dispatchMouseEvent', {\n        type: 'mouseReleased',\n        button,\n        x: _this9._x,\n        y: _this9._y,\n        modifiers: _this9._keyboard._modifiers,\n        clickCount\n      });\n    })();\n  }\n  /**\n   * Dispatches a `mousewheel` event.\n   * @param options - Optional: `MouseWheelOptions`.\n   *\n   * @example\n   * An example of zooming into an element:\n   * ```js\n   * await page.goto('https://mdn.mozillademos.org/en-US/docs/Web/API/Element/wheel_event$samples/Scaling_an_element_via_the_wheel?revision=1587366');\n   *\n   * const elem = await page.$('div');\n   * const boundingBox = await elem.boundingBox();\n   * await page.mouse.move(\n   *   boundingBox.x + boundingBox.width / 2,\n   *   boundingBox.y + boundingBox.height / 2\n   * );\n   *\n   * await page.mouse.wheel({ deltaY: -100 })\n   * ```\n   */\n\n\n  wheel(options = {}) {\n    var _this10 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        deltaX = 0,\n        deltaY = 0\n      } = options;\n      yield _this10._client.send('Input.dispatchMouseEvent', {\n        type: 'mouseWheel',\n        x: _this10._x,\n        y: _this10._y,\n        deltaX,\n        deltaY,\n        modifiers: _this10._keyboard._modifiers,\n        pointerType: 'mouse'\n      });\n    })();\n  }\n  /**\n   * Dispatches a `drag` event.\n   * @param start - starting point for drag\n   * @param target - point to drag to\n   */\n\n\n  drag(start, target) {\n    var _this11 = this;\n\n    return _asyncToGenerator(function* () {\n      const promise = new Promise(resolve => {\n        _this11._client.once('Input.dragIntercepted', event => resolve(event.data));\n      });\n      yield _this11.move(start.x, start.y);\n      yield _this11.down();\n      yield _this11.move(target.x, target.y);\n      return promise;\n    })();\n  }\n  /**\n   * Dispatches a `dragenter` event.\n   * @param target - point for emitting `dragenter` event\n   */\n\n\n  dragEnter(target, data) {\n    var _this12 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this12._client.send('Input.dispatchDragEvent', {\n        type: 'dragEnter',\n        x: target.x,\n        y: target.y,\n        modifiers: _this12._keyboard._modifiers,\n        data\n      });\n    })();\n  }\n  /**\n   * Dispatches a `dragover` event.\n   * @param target - point for emitting `dragover` event\n   */\n\n\n  dragOver(target, data) {\n    var _this13 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this13._client.send('Input.dispatchDragEvent', {\n        type: 'dragOver',\n        x: target.x,\n        y: target.y,\n        modifiers: _this13._keyboard._modifiers,\n        data\n      });\n    })();\n  }\n  /**\n   * Performs a dragenter, dragover, and drop in sequence.\n   * @param target - point to drop on\n   * @param data - drag data containing items and operations mask\n   * @param options - An object of options. Accepts delay which,\n   * if specified, is the time to wait between `dragover` and `drop` in milliseconds.\n   * Defaults to 0.\n   */\n\n\n  drop(target, data) {\n    var _this14 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this14._client.send('Input.dispatchDragEvent', {\n        type: 'drop',\n        x: target.x,\n        y: target.y,\n        modifiers: _this14._keyboard._modifiers,\n        data\n      });\n    })();\n  }\n  /**\n   * Performs a drag, dragenter, dragover, and drop in sequence.\n   * @param target - point to drag from\n   * @param target - point to drop on\n   * @param options - An object of options. Accepts delay which,\n   * if specified, is the time to wait between `dragover` and `drop` in milliseconds.\n   * Defaults to 0.\n   */\n\n\n  dragAndDrop(start, target, options = {}) {\n    var _this15 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        delay = null\n      } = options;\n      const data = yield _this15.drag(start, target);\n      yield _this15.dragEnter(target, data);\n      yield _this15.dragOver(target, data);\n\n      if (delay) {\n        yield new Promise(resolve => setTimeout(resolve, delay));\n      }\n\n      yield _this15.drop(target, data);\n      yield _this15.up();\n    })();\n  }\n\n}\n\nexports.Mouse = Mouse;\n/**\n * The Touchscreen class exposes touchscreen events.\n * @public\n */\n\nclass Touchscreen {\n  /**\n   * @internal\n   */\n  constructor(client, keyboard) {\n    this._client = client;\n    this._keyboard = keyboard;\n  }\n  /**\n   * Dispatches a `touchstart` and `touchend` event.\n   * @param x - Horizontal position of the tap.\n   * @param y - Vertical position of the tap.\n   */\n\n\n  tap(x, y) {\n    var _this16 = this;\n\n    return _asyncToGenerator(function* () {\n      const touchPoints = [{\n        x: Math.round(x),\n        y: Math.round(y)\n      }];\n      yield _this16._client.send('Input.dispatchTouchEvent', {\n        type: 'touchStart',\n        touchPoints,\n        modifiers: _this16._keyboard._modifiers\n      });\n      yield _this16._client.send('Input.dispatchTouchEvent', {\n        type: 'touchEnd',\n        touchPoints: [],\n        modifiers: _this16._keyboard._modifiers\n      });\n    })();\n  }\n\n}\n\nexports.Touchscreen = Touchscreen;","map":{"version":3,"sources":["C:/Users/Matth/workspace/node_modules/puppeteer/lib/cjs/puppeteer/common/Input.js"],"names":["Object","defineProperty","exports","value","Touchscreen","Mouse","Keyboard","assert_js_1","require","USKeyboardLayout_js_1","constructor","client","_modifiers","_pressedKeys","Set","_client","down","key","options","text","undefined","description","_keyDescriptionForString","autoRepeat","has","code","add","_modifierBit","send","type","modifiers","windowsVirtualKeyCode","keyCode","unmodifiedText","location","isKeypad","keyString","shift","definition","keyDefinitions","assert","shiftKey","shiftKeyCode","length","shiftText","up","delete","sendCharacter","char","charIsKey","delay","press","Promise","f","setTimeout","keyboard","_x","_y","_button","_keyboard","move","x","y","steps","fromX","fromY","i","button","click","clickCount","wheel","deltaX","deltaY","pointerType","drag","start","target","promise","resolve","once","event","data","dragEnter","dragOver","drop","dragAndDrop","tap","touchPoints","Math","round"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Touchscreen = exports.Mouse = exports.Keyboard = void 0;\nconst assert_js_1 = require(\"./assert.js\");\nconst USKeyboardLayout_js_1 = require(\"./USKeyboardLayout.js\");\n/**\n * Keyboard provides an api for managing a virtual keyboard.\n * The high level api is {@link Keyboard.\"type\"},\n * which takes raw characters and generates proper keydown, keypress/input,\n * and keyup events on your page.\n *\n * @remarks\n * For finer control, you can use {@link Keyboard.down},\n * {@link Keyboard.up}, and {@link Keyboard.sendCharacter}\n * to manually fire events as if they were generated from a real keyboard.\n *\n * On MacOS, keyboard shortcuts like `⌘ A` -\\> Select All do not work.\n * See {@link https://github.com/puppeteer/puppeteer/issues/1313 | #1313}.\n *\n * @example\n * An example of holding down `Shift` in order to select and delete some text:\n * ```js\n * await page.keyboard.type('Hello World!');\n * await page.keyboard.press('ArrowLeft');\n *\n * await page.keyboard.down('Shift');\n * for (let i = 0; i < ' World'.length; i++)\n *   await page.keyboard.press('ArrowLeft');\n * await page.keyboard.up('Shift');\n *\n * await page.keyboard.press('Backspace');\n * // Result text will end up saying 'Hello!'\n * ```\n *\n * @example\n * An example of pressing `A`\n * ```js\n * await page.keyboard.down('Shift');\n * await page.keyboard.press('KeyA');\n * await page.keyboard.up('Shift');\n * ```\n *\n * @public\n */\nclass Keyboard {\n    /** @internal */\n    constructor(client) {\n        /** @internal */\n        this._modifiers = 0;\n        this._pressedKeys = new Set();\n        this._client = client;\n    }\n    /**\n     * Dispatches a `keydown` event.\n     *\n     * @remarks\n     * If `key` is a single character and no modifier keys besides `Shift`\n     * are being held down, a `keypress`/`input` event will also generated.\n     * The `text` option can be specified to force an input event to be generated.\n     * If `key` is a modifier key, `Shift`, `Meta`, `Control`, or `Alt`,\n     * subsequent key presses will be sent with that modifier active.\n     * To release the modifier key, use {@link Keyboard.up}.\n     *\n     * After the key is pressed once, subsequent calls to\n     * {@link Keyboard.down} will have\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/repeat | repeat}\n     * set to true. To release the key, use {@link Keyboard.up}.\n     *\n     * Modifier keys DO influence {@link Keyboard.down}.\n     * Holding down `Shift` will type the text in upper case.\n     *\n     * @param key - Name of key to press, such as `ArrowLeft`.\n     * See {@link KeyInput} for a list of all key names.\n     *\n     * @param options - An object of options. Accepts text which, if specified,\n     * generates an input event with this text.\n     */\n    async down(key, options = { text: undefined }) {\n        const description = this._keyDescriptionForString(key);\n        const autoRepeat = this._pressedKeys.has(description.code);\n        this._pressedKeys.add(description.code);\n        this._modifiers |= this._modifierBit(description.key);\n        const text = options.text === undefined ? description.text : options.text;\n        await this._client.send('Input.dispatchKeyEvent', {\n            type: text ? 'keyDown' : 'rawKeyDown',\n            modifiers: this._modifiers,\n            windowsVirtualKeyCode: description.keyCode,\n            code: description.code,\n            key: description.key,\n            text: text,\n            unmodifiedText: text,\n            autoRepeat,\n            location: description.location,\n            isKeypad: description.location === 3,\n        });\n    }\n    _modifierBit(key) {\n        if (key === 'Alt')\n            return 1;\n        if (key === 'Control')\n            return 2;\n        if (key === 'Meta')\n            return 4;\n        if (key === 'Shift')\n            return 8;\n        return 0;\n    }\n    _keyDescriptionForString(keyString) {\n        const shift = this._modifiers & 8;\n        const description = {\n            key: '',\n            keyCode: 0,\n            code: '',\n            text: '',\n            location: 0,\n        };\n        const definition = USKeyboardLayout_js_1.keyDefinitions[keyString];\n        assert_js_1.assert(definition, `Unknown key: \"${keyString}\"`);\n        if (definition.key)\n            description.key = definition.key;\n        if (shift && definition.shiftKey)\n            description.key = definition.shiftKey;\n        if (definition.keyCode)\n            description.keyCode = definition.keyCode;\n        if (shift && definition.shiftKeyCode)\n            description.keyCode = definition.shiftKeyCode;\n        if (definition.code)\n            description.code = definition.code;\n        if (definition.location)\n            description.location = definition.location;\n        if (description.key.length === 1)\n            description.text = description.key;\n        if (definition.text)\n            description.text = definition.text;\n        if (shift && definition.shiftText)\n            description.text = definition.shiftText;\n        // if any modifiers besides shift are pressed, no text should be sent\n        if (this._modifiers & ~8)\n            description.text = '';\n        return description;\n    }\n    /**\n     * Dispatches a `keyup` event.\n     *\n     * @param key - Name of key to release, such as `ArrowLeft`.\n     * See {@link KeyInput | KeyInput}\n     * for a list of all key names.\n     */\n    async up(key) {\n        const description = this._keyDescriptionForString(key);\n        this._modifiers &= ~this._modifierBit(description.key);\n        this._pressedKeys.delete(description.code);\n        await this._client.send('Input.dispatchKeyEvent', {\n            type: 'keyUp',\n            modifiers: this._modifiers,\n            key: description.key,\n            windowsVirtualKeyCode: description.keyCode,\n            code: description.code,\n            location: description.location,\n        });\n    }\n    /**\n     * Dispatches a `keypress` and `input` event.\n     * This does not send a `keydown` or `keyup` event.\n     *\n     * @remarks\n     * Modifier keys DO NOT effect {@link Keyboard.sendCharacter | Keyboard.sendCharacter}.\n     * Holding down `Shift` will not type the text in upper case.\n     *\n     * @example\n     * ```js\n     * page.keyboard.sendCharacter('嗨');\n     * ```\n     *\n     * @param char - Character to send into the page.\n     */\n    async sendCharacter(char) {\n        await this._client.send('Input.insertText', { text: char });\n    }\n    charIsKey(char) {\n        return !!USKeyboardLayout_js_1.keyDefinitions[char];\n    }\n    /**\n     * Sends a `keydown`, `keypress`/`input`,\n     * and `keyup` event for each character in the text.\n     *\n     * @remarks\n     * To press a special key, like `Control` or `ArrowDown`,\n     * use {@link Keyboard.press}.\n     *\n     * Modifier keys DO NOT effect `keyboard.type`.\n     * Holding down `Shift` will not type the text in upper case.\n     *\n     * @example\n     * ```js\n     * await page.keyboard.type('Hello'); // Types instantly\n     * await page.keyboard.type('World', {delay: 100}); // Types slower, like a user\n     * ```\n     *\n     * @param text - A text to type into a focused element.\n     * @param options - An object of options. Accepts delay which,\n     * if specified, is the time to wait between `keydown` and `keyup` in milliseconds.\n     * Defaults to 0.\n     */\n    async type(text, options = {}) {\n        const delay = options.delay || null;\n        for (const char of text) {\n            if (this.charIsKey(char)) {\n                await this.press(char, { delay });\n            }\n            else {\n                if (delay)\n                    await new Promise((f) => setTimeout(f, delay));\n                await this.sendCharacter(char);\n            }\n        }\n    }\n    /**\n     * Shortcut for {@link Keyboard.down}\n     * and {@link Keyboard.up}.\n     *\n     * @remarks\n     * If `key` is a single character and no modifier keys besides `Shift`\n     * are being held down, a `keypress`/`input` event will also generated.\n     * The `text` option can be specified to force an input event to be generated.\n     *\n     * Modifier keys DO effect {@link Keyboard.press}.\n     * Holding down `Shift` will type the text in upper case.\n     *\n     * @param key - Name of key to press, such as `ArrowLeft`.\n     * See {@link KeyInput} for a list of all key names.\n     *\n     * @param options - An object of options. Accepts text which, if specified,\n     * generates an input event with this text. Accepts delay which,\n     * if specified, is the time to wait between `keydown` and `keyup` in milliseconds.\n     * Defaults to 0.\n     */\n    async press(key, options = {}) {\n        const { delay = null } = options;\n        await this.down(key, options);\n        if (delay)\n            await new Promise((f) => setTimeout(f, options.delay));\n        await this.up(key);\n    }\n}\nexports.Keyboard = Keyboard;\n/**\n * The Mouse class operates in main-frame CSS pixels\n * relative to the top-left corner of the viewport.\n * @remarks\n * Every `page` object has its own Mouse, accessible with [`page.mouse`](#pagemouse).\n *\n * @example\n * ```js\n * // Using ‘page.mouse’ to trace a 100x100 square.\n * await page.mouse.move(0, 0);\n * await page.mouse.down();\n * await page.mouse.move(0, 100);\n * await page.mouse.move(100, 100);\n * await page.mouse.move(100, 0);\n * await page.mouse.move(0, 0);\n * await page.mouse.up();\n * ```\n *\n * **Note**: The mouse events trigger synthetic `MouseEvent`s.\n * This means that it does not fully replicate the functionality of what a normal user\n * would be able to do with their mouse.\n *\n * For example, dragging and selecting text is not possible using `page.mouse`.\n * Instead, you can use the {@link https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot/getSelection | `DocumentOrShadowRoot.getSelection()`} functionality implemented in the platform.\n *\n * @example\n * For example, if you want to select all content between nodes:\n * ```js\n * await page.evaluate((from, to) => {\n *   const selection = from.getRootNode().getSelection();\n *   const range = document.createRange();\n *   range.setStartBefore(from);\n *   range.setEndAfter(to);\n *   selection.removeAllRanges();\n *   selection.addRange(range);\n * }, fromJSHandle, toJSHandle);\n * ```\n * If you then would want to copy-paste your selection, you can use the clipboard api:\n * ```js\n * // The clipboard api does not allow you to copy, unless the tab is focused.\n * await page.bringToFront();\n * await page.evaluate(() => {\n *   // Copy the selected content to the clipboard\n *   document.execCommand('copy');\n *   // Obtain the content of the clipboard as a string\n *   return navigator.clipboard.readText();\n * });\n * ```\n * **Note**: If you want access to the clipboard API,\n * you have to give it permission to do so:\n * ```js\n * await browser.defaultBrowserContext().overridePermissions(\n *   '<your origin>', ['clipboard-read', 'clipboard-write']\n * );\n * ```\n * @public\n */\nclass Mouse {\n    /**\n     * @internal\n     */\n    constructor(client, keyboard) {\n        this._x = 0;\n        this._y = 0;\n        this._button = 'none';\n        this._client = client;\n        this._keyboard = keyboard;\n    }\n    /**\n     * Dispatches a `mousemove` event.\n     * @param x - Horizontal position of the mouse.\n     * @param y - Vertical position of the mouse.\n     * @param options - Optional object. If specified, the `steps` property\n     * sends intermediate `mousemove` events when set to `1` (default).\n     */\n    async move(x, y, options = {}) {\n        const { steps = 1 } = options;\n        const fromX = this._x, fromY = this._y;\n        this._x = x;\n        this._y = y;\n        for (let i = 1; i <= steps; i++) {\n            await this._client.send('Input.dispatchMouseEvent', {\n                type: 'mouseMoved',\n                button: this._button,\n                x: fromX + (this._x - fromX) * (i / steps),\n                y: fromY + (this._y - fromY) * (i / steps),\n                modifiers: this._keyboard._modifiers,\n            });\n        }\n    }\n    /**\n     * Shortcut for `mouse.move`, `mouse.down` and `mouse.up`.\n     * @param x - Horizontal position of the mouse.\n     * @param y - Vertical position of the mouse.\n     * @param options - Optional `MouseOptions`.\n     */\n    async click(x, y, options = {}) {\n        const { delay = null } = options;\n        if (delay !== null) {\n            await this.move(x, y);\n            await this.down(options);\n            await new Promise((f) => setTimeout(f, delay));\n            await this.up(options);\n        }\n        else {\n            await this.move(x, y);\n            await this.down(options);\n            await this.up(options);\n        }\n    }\n    /**\n     * Dispatches a `mousedown` event.\n     * @param options - Optional `MouseOptions`.\n     */\n    async down(options = {}) {\n        const { button = 'left', clickCount = 1 } = options;\n        this._button = button;\n        await this._client.send('Input.dispatchMouseEvent', {\n            type: 'mousePressed',\n            button,\n            x: this._x,\n            y: this._y,\n            modifiers: this._keyboard._modifiers,\n            clickCount,\n        });\n    }\n    /**\n     * Dispatches a `mouseup` event.\n     * @param options - Optional `MouseOptions`.\n     */\n    async up(options = {}) {\n        const { button = 'left', clickCount = 1 } = options;\n        this._button = 'none';\n        await this._client.send('Input.dispatchMouseEvent', {\n            type: 'mouseReleased',\n            button,\n            x: this._x,\n            y: this._y,\n            modifiers: this._keyboard._modifiers,\n            clickCount,\n        });\n    }\n    /**\n     * Dispatches a `mousewheel` event.\n     * @param options - Optional: `MouseWheelOptions`.\n     *\n     * @example\n     * An example of zooming into an element:\n     * ```js\n     * await page.goto('https://mdn.mozillademos.org/en-US/docs/Web/API/Element/wheel_event$samples/Scaling_an_element_via_the_wheel?revision=1587366');\n     *\n     * const elem = await page.$('div');\n     * const boundingBox = await elem.boundingBox();\n     * await page.mouse.move(\n     *   boundingBox.x + boundingBox.width / 2,\n     *   boundingBox.y + boundingBox.height / 2\n     * );\n     *\n     * await page.mouse.wheel({ deltaY: -100 })\n     * ```\n     */\n    async wheel(options = {}) {\n        const { deltaX = 0, deltaY = 0 } = options;\n        await this._client.send('Input.dispatchMouseEvent', {\n            type: 'mouseWheel',\n            x: this._x,\n            y: this._y,\n            deltaX,\n            deltaY,\n            modifiers: this._keyboard._modifiers,\n            pointerType: 'mouse',\n        });\n    }\n    /**\n     * Dispatches a `drag` event.\n     * @param start - starting point for drag\n     * @param target - point to drag to\n     */\n    async drag(start, target) {\n        const promise = new Promise((resolve) => {\n            this._client.once('Input.dragIntercepted', (event) => resolve(event.data));\n        });\n        await this.move(start.x, start.y);\n        await this.down();\n        await this.move(target.x, target.y);\n        return promise;\n    }\n    /**\n     * Dispatches a `dragenter` event.\n     * @param target - point for emitting `dragenter` event\n     */\n    async dragEnter(target, data) {\n        await this._client.send('Input.dispatchDragEvent', {\n            type: 'dragEnter',\n            x: target.x,\n            y: target.y,\n            modifiers: this._keyboard._modifiers,\n            data,\n        });\n    }\n    /**\n     * Dispatches a `dragover` event.\n     * @param target - point for emitting `dragover` event\n     */\n    async dragOver(target, data) {\n        await this._client.send('Input.dispatchDragEvent', {\n            type: 'dragOver',\n            x: target.x,\n            y: target.y,\n            modifiers: this._keyboard._modifiers,\n            data,\n        });\n    }\n    /**\n     * Performs a dragenter, dragover, and drop in sequence.\n     * @param target - point to drop on\n     * @param data - drag data containing items and operations mask\n     * @param options - An object of options. Accepts delay which,\n     * if specified, is the time to wait between `dragover` and `drop` in milliseconds.\n     * Defaults to 0.\n     */\n    async drop(target, data) {\n        await this._client.send('Input.dispatchDragEvent', {\n            type: 'drop',\n            x: target.x,\n            y: target.y,\n            modifiers: this._keyboard._modifiers,\n            data,\n        });\n    }\n    /**\n     * Performs a drag, dragenter, dragover, and drop in sequence.\n     * @param target - point to drag from\n     * @param target - point to drop on\n     * @param options - An object of options. Accepts delay which,\n     * if specified, is the time to wait between `dragover` and `drop` in milliseconds.\n     * Defaults to 0.\n     */\n    async dragAndDrop(start, target, options = {}) {\n        const { delay = null } = options;\n        const data = await this.drag(start, target);\n        await this.dragEnter(target, data);\n        await this.dragOver(target, data);\n        if (delay) {\n            await new Promise((resolve) => setTimeout(resolve, delay));\n        }\n        await this.drop(target, data);\n        await this.up();\n    }\n}\nexports.Mouse = Mouse;\n/**\n * The Touchscreen class exposes touchscreen events.\n * @public\n */\nclass Touchscreen {\n    /**\n     * @internal\n     */\n    constructor(client, keyboard) {\n        this._client = client;\n        this._keyboard = keyboard;\n    }\n    /**\n     * Dispatches a `touchstart` and `touchend` event.\n     * @param x - Horizontal position of the tap.\n     * @param y - Vertical position of the tap.\n     */\n    async tap(x, y) {\n        const touchPoints = [{ x: Math.round(x), y: Math.round(y) }];\n        await this._client.send('Input.dispatchTouchEvent', {\n            type: 'touchStart',\n            touchPoints,\n            modifiers: this._keyboard._modifiers,\n        });\n        await this._client.send('Input.dispatchTouchEvent', {\n            type: 'touchEnd',\n            touchPoints: [],\n            modifiers: this._keyboard._modifiers,\n        });\n    }\n}\nexports.Touchscreen = Touchscreen;\n"]},"metadata":{},"sourceType":"script"}