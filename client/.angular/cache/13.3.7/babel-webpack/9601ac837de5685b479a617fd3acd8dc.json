{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\Matth\\\\workspace\\\\angular-ecommerce\\\\client\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HTTPResponse = void 0;\n\nconst SecurityDetails_js_1 = require(\"./SecurityDetails.js\");\n/**\n * The HTTPResponse class represents responses which are received by the\n * {@link Page} class.\n *\n * @public\n */\n\n\nclass HTTPResponse {\n  /**\n   * @internal\n   */\n  constructor(client, request, responsePayload) {\n    this._contentPromise = null;\n    this._headers = {};\n    this._client = client;\n    this._request = request;\n    this._bodyLoadedPromise = new Promise(fulfill => {\n      this._bodyLoadedPromiseFulfill = fulfill;\n    });\n    this._remoteAddress = {\n      ip: responsePayload.remoteIPAddress,\n      port: responsePayload.remotePort\n    };\n    this._status = responsePayload.status;\n    this._statusText = responsePayload.statusText;\n    this._url = request.url();\n    this._fromDiskCache = !!responsePayload.fromDiskCache;\n    this._fromServiceWorker = !!responsePayload.fromServiceWorker;\n\n    for (const key of Object.keys(responsePayload.headers)) this._headers[key.toLowerCase()] = responsePayload.headers[key];\n\n    this._securityDetails = responsePayload.securityDetails ? new SecurityDetails_js_1.SecurityDetails(responsePayload.securityDetails) : null;\n  }\n  /**\n   * @internal\n   */\n\n\n  _resolveBody(err) {\n    return this._bodyLoadedPromiseFulfill(err);\n  }\n  /**\n   * @returns The IP address and port number used to connect to the remote\n   * server.\n   */\n\n\n  remoteAddress() {\n    return this._remoteAddress;\n  }\n  /**\n   * @returns The URL of the response.\n   */\n\n\n  url() {\n    return this._url;\n  }\n  /**\n   * @returns True if the response was successful (status in the range 200-299).\n   */\n\n\n  ok() {\n    // TODO: document === 0 case?\n    return this._status === 0 || this._status >= 200 && this._status <= 299;\n  }\n  /**\n   * @returns The status code of the response (e.g., 200 for a success).\n   */\n\n\n  status() {\n    return this._status;\n  }\n  /**\n   * @returns  The status text of the response (e.g. usually an \"OK\" for a\n   * success).\n   */\n\n\n  statusText() {\n    return this._statusText;\n  }\n  /**\n   * @returns An object with HTTP headers associated with the response. All\n   * header names are lower-case.\n   */\n\n\n  headers() {\n    return this._headers;\n  }\n  /**\n   * @returns {@link SecurityDetails} if the response was received over the\n   * secure connection, or `null` otherwise.\n   */\n\n\n  securityDetails() {\n    return this._securityDetails;\n  }\n  /**\n   * @returns Promise which resolves to a buffer with response body.\n   */\n\n\n  buffer() {\n    var _this = this;\n\n    if (!this._contentPromise) {\n      this._contentPromise = this._bodyLoadedPromise.then( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (error) {\n          if (error) throw error;\n          const response = yield _this._client.send('Network.getResponseBody', {\n            requestId: _this._request._requestId\n          });\n          return Buffer.from(response.body, response.base64Encoded ? 'base64' : 'utf8');\n        });\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    }\n\n    return this._contentPromise;\n  }\n  /**\n   * @returns Promise which resolves to a text representation of response body.\n   */\n\n\n  text() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const content = yield _this2.buffer();\n      return content.toString('utf8');\n    })();\n  }\n  /**\n   *\n   * @returns Promise which resolves to a JSON representation of response body.\n   *\n   * @remarks\n   *\n   * This method will throw if the response body is not parsable via\n   * `JSON.parse`.\n   */\n\n\n  json() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const content = yield _this3.text();\n      return JSON.parse(content);\n    })();\n  }\n  /**\n   * @returns A matching {@link HTTPRequest} object.\n   */\n\n\n  request() {\n    return this._request;\n  }\n  /**\n   * @returns True if the response was served from either the browser's disk\n   * cache or memory cache.\n   */\n\n\n  fromCache() {\n    return this._fromDiskCache || this._request._fromMemoryCache;\n  }\n  /**\n   * @returns True if the response was served by a service worker.\n   */\n\n\n  fromServiceWorker() {\n    return this._fromServiceWorker;\n  }\n  /**\n   * @returns A {@link Frame} that initiated this response, or `null` if\n   * navigating to error pages.\n   */\n\n\n  frame() {\n    return this._request.frame();\n  }\n\n}\n\nexports.HTTPResponse = HTTPResponse;","map":{"version":3,"sources":["C:/Users/Matth/workspace/node_modules/puppeteer/lib/cjs/puppeteer/common/HTTPResponse.js"],"names":["Object","defineProperty","exports","value","HTTPResponse","SecurityDetails_js_1","require","constructor","client","request","responsePayload","_contentPromise","_headers","_client","_request","_bodyLoadedPromise","Promise","fulfill","_bodyLoadedPromiseFulfill","_remoteAddress","ip","remoteIPAddress","port","remotePort","_status","status","_statusText","statusText","_url","url","_fromDiskCache","fromDiskCache","_fromServiceWorker","fromServiceWorker","key","keys","headers","toLowerCase","_securityDetails","securityDetails","SecurityDetails","_resolveBody","err","remoteAddress","ok","buffer","then","error","response","send","requestId","_requestId","Buffer","from","body","base64Encoded","text","content","toString","json","JSON","parse","fromCache","_fromMemoryCache","frame"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HTTPResponse = void 0;\nconst SecurityDetails_js_1 = require(\"./SecurityDetails.js\");\n/**\n * The HTTPResponse class represents responses which are received by the\n * {@link Page} class.\n *\n * @public\n */\nclass HTTPResponse {\n    /**\n     * @internal\n     */\n    constructor(client, request, responsePayload) {\n        this._contentPromise = null;\n        this._headers = {};\n        this._client = client;\n        this._request = request;\n        this._bodyLoadedPromise = new Promise((fulfill) => {\n            this._bodyLoadedPromiseFulfill = fulfill;\n        });\n        this._remoteAddress = {\n            ip: responsePayload.remoteIPAddress,\n            port: responsePayload.remotePort,\n        };\n        this._status = responsePayload.status;\n        this._statusText = responsePayload.statusText;\n        this._url = request.url();\n        this._fromDiskCache = !!responsePayload.fromDiskCache;\n        this._fromServiceWorker = !!responsePayload.fromServiceWorker;\n        for (const key of Object.keys(responsePayload.headers))\n            this._headers[key.toLowerCase()] = responsePayload.headers[key];\n        this._securityDetails = responsePayload.securityDetails\n            ? new SecurityDetails_js_1.SecurityDetails(responsePayload.securityDetails)\n            : null;\n    }\n    /**\n     * @internal\n     */\n    _resolveBody(err) {\n        return this._bodyLoadedPromiseFulfill(err);\n    }\n    /**\n     * @returns The IP address and port number used to connect to the remote\n     * server.\n     */\n    remoteAddress() {\n        return this._remoteAddress;\n    }\n    /**\n     * @returns The URL of the response.\n     */\n    url() {\n        return this._url;\n    }\n    /**\n     * @returns True if the response was successful (status in the range 200-299).\n     */\n    ok() {\n        // TODO: document === 0 case?\n        return this._status === 0 || (this._status >= 200 && this._status <= 299);\n    }\n    /**\n     * @returns The status code of the response (e.g., 200 for a success).\n     */\n    status() {\n        return this._status;\n    }\n    /**\n     * @returns  The status text of the response (e.g. usually an \"OK\" for a\n     * success).\n     */\n    statusText() {\n        return this._statusText;\n    }\n    /**\n     * @returns An object with HTTP headers associated with the response. All\n     * header names are lower-case.\n     */\n    headers() {\n        return this._headers;\n    }\n    /**\n     * @returns {@link SecurityDetails} if the response was received over the\n     * secure connection, or `null` otherwise.\n     */\n    securityDetails() {\n        return this._securityDetails;\n    }\n    /**\n     * @returns Promise which resolves to a buffer with response body.\n     */\n    buffer() {\n        if (!this._contentPromise) {\n            this._contentPromise = this._bodyLoadedPromise.then(async (error) => {\n                if (error)\n                    throw error;\n                const response = await this._client.send('Network.getResponseBody', {\n                    requestId: this._request._requestId,\n                });\n                return Buffer.from(response.body, response.base64Encoded ? 'base64' : 'utf8');\n            });\n        }\n        return this._contentPromise;\n    }\n    /**\n     * @returns Promise which resolves to a text representation of response body.\n     */\n    async text() {\n        const content = await this.buffer();\n        return content.toString('utf8');\n    }\n    /**\n     *\n     * @returns Promise which resolves to a JSON representation of response body.\n     *\n     * @remarks\n     *\n     * This method will throw if the response body is not parsable via\n     * `JSON.parse`.\n     */\n    async json() {\n        const content = await this.text();\n        return JSON.parse(content);\n    }\n    /**\n     * @returns A matching {@link HTTPRequest} object.\n     */\n    request() {\n        return this._request;\n    }\n    /**\n     * @returns True if the response was served from either the browser's disk\n     * cache or memory cache.\n     */\n    fromCache() {\n        return this._fromDiskCache || this._request._fromMemoryCache;\n    }\n    /**\n     * @returns True if the response was served by a service worker.\n     */\n    fromServiceWorker() {\n        return this._fromServiceWorker;\n    }\n    /**\n     * @returns A {@link Frame} that initiated this response, or `null` if\n     * navigating to error pages.\n     */\n    frame() {\n        return this._request.frame();\n    }\n}\nexports.HTTPResponse = HTTPResponse;\n"]},"metadata":{},"sourceType":"script"}