{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\Matth\\\\workspace\\\\angular-ecommerce\\\\client\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Tracing = void 0;\n/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst assert_js_1 = require(\"./assert.js\");\n\nconst helper_js_1 = require(\"./helper.js\");\n/**\n * The Tracing class exposes the tracing audit interface.\n * @remarks\n * You can use `tracing.start` and `tracing.stop` to create a trace file\n * which can be opened in Chrome DevTools or {@link https://chromedevtools.github.io/timeline-viewer/ | timeline viewer}.\n *\n * @example\n * ```js\n * await page.tracing.start({path: 'trace.json'});\n * await page.goto('https://www.google.com');\n * await page.tracing.stop();\n * ```\n *\n * @public\n */\n\n\nclass Tracing {\n  /**\n   * @internal\n   */\n  constructor(client) {\n    this._recording = false;\n    this._path = '';\n    this._client = client;\n  }\n  /**\n   * Starts a trace for the current page.\n   * @remarks\n   * Only one trace can be active at a time per browser.\n   * @param options - Optional `TracingOptions`.\n   */\n\n\n  start(options = {}) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      assert_js_1.assert(!_this._recording, 'Cannot start recording trace while already recording trace.');\n      const defaultCategories = ['-*', 'devtools.timeline', 'v8.execute', 'disabled-by-default-devtools.timeline', 'disabled-by-default-devtools.timeline.frame', 'toplevel', 'blink.console', 'blink.user_timing', 'latencyInfo', 'disabled-by-default-devtools.timeline.stack', 'disabled-by-default-v8.cpu_profiler', 'disabled-by-default-v8.cpu_profiler.hires'];\n      const {\n        path = null,\n        screenshots = false,\n        categories = defaultCategories\n      } = options;\n      if (screenshots) categories.push('disabled-by-default-devtools.screenshot');\n      _this._path = path;\n      _this._recording = true;\n      yield _this._client.send('Tracing.start', {\n        transferMode: 'ReturnAsStream',\n        categories: categories.join(',')\n      });\n    })();\n  }\n  /**\n   * Stops a trace started with the `start` method.\n   * @returns Promise which resolves to buffer with trace data.\n   */\n\n\n  stop() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      let fulfill;\n      let reject;\n      const contentPromise = new Promise((x, y) => {\n        fulfill = x;\n        reject = y;\n      });\n\n      _this2._client.once('Tracing.tracingComplete', /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (event) {\n          try {\n            const readable = yield helper_js_1.helper.getReadableFromProtocolStream(_this2._client, event.stream);\n            const buffer = yield helper_js_1.helper.getReadableAsBuffer(readable, _this2._path);\n            fulfill(buffer);\n          } catch (error) {\n            reject(error);\n          }\n        });\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n\n      yield _this2._client.send('Tracing.end');\n      _this2._recording = false;\n      return contentPromise;\n    })();\n  }\n\n}\n\nexports.Tracing = Tracing;","map":{"version":3,"sources":["C:/Users/Matth/workspace/node_modules/puppeteer/lib/cjs/puppeteer/common/Tracing.js"],"names":["Object","defineProperty","exports","value","Tracing","assert_js_1","require","helper_js_1","constructor","client","_recording","_path","_client","start","options","assert","defaultCategories","path","screenshots","categories","push","send","transferMode","join","stop","fulfill","reject","contentPromise","Promise","x","y","once","event","readable","helper","getReadableFromProtocolStream","stream","buffer","getReadableAsBuffer","error"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Tracing = void 0;\n/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst assert_js_1 = require(\"./assert.js\");\nconst helper_js_1 = require(\"./helper.js\");\n/**\n * The Tracing class exposes the tracing audit interface.\n * @remarks\n * You can use `tracing.start` and `tracing.stop` to create a trace file\n * which can be opened in Chrome DevTools or {@link https://chromedevtools.github.io/timeline-viewer/ | timeline viewer}.\n *\n * @example\n * ```js\n * await page.tracing.start({path: 'trace.json'});\n * await page.goto('https://www.google.com');\n * await page.tracing.stop();\n * ```\n *\n * @public\n */\nclass Tracing {\n    /**\n     * @internal\n     */\n    constructor(client) {\n        this._recording = false;\n        this._path = '';\n        this._client = client;\n    }\n    /**\n     * Starts a trace for the current page.\n     * @remarks\n     * Only one trace can be active at a time per browser.\n     * @param options - Optional `TracingOptions`.\n     */\n    async start(options = {}) {\n        assert_js_1.assert(!this._recording, 'Cannot start recording trace while already recording trace.');\n        const defaultCategories = [\n            '-*',\n            'devtools.timeline',\n            'v8.execute',\n            'disabled-by-default-devtools.timeline',\n            'disabled-by-default-devtools.timeline.frame',\n            'toplevel',\n            'blink.console',\n            'blink.user_timing',\n            'latencyInfo',\n            'disabled-by-default-devtools.timeline.stack',\n            'disabled-by-default-v8.cpu_profiler',\n            'disabled-by-default-v8.cpu_profiler.hires',\n        ];\n        const { path = null, screenshots = false, categories = defaultCategories, } = options;\n        if (screenshots)\n            categories.push('disabled-by-default-devtools.screenshot');\n        this._path = path;\n        this._recording = true;\n        await this._client.send('Tracing.start', {\n            transferMode: 'ReturnAsStream',\n            categories: categories.join(','),\n        });\n    }\n    /**\n     * Stops a trace started with the `start` method.\n     * @returns Promise which resolves to buffer with trace data.\n     */\n    async stop() {\n        let fulfill;\n        let reject;\n        const contentPromise = new Promise((x, y) => {\n            fulfill = x;\n            reject = y;\n        });\n        this._client.once('Tracing.tracingComplete', async (event) => {\n            try {\n                const readable = await helper_js_1.helper.getReadableFromProtocolStream(this._client, event.stream);\n                const buffer = await helper_js_1.helper.getReadableAsBuffer(readable, this._path);\n                fulfill(buffer);\n            }\n            catch (error) {\n                reject(error);\n            }\n        });\n        await this._client.send('Tracing.end');\n        this._recording = false;\n        return contentPromise;\n    }\n}\nexports.Tracing = Tracing;\n"]},"metadata":{},"sourceType":"script"}