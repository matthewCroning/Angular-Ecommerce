{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\Matth\\\\workspace\\\\angular-ecommerce\\\\client\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ExecutionContext = exports.EVALUATION_SCRIPT_URL = void 0;\n\nconst assert_js_1 = require(\"./assert.js\");\n\nconst helper_js_1 = require(\"./helper.js\");\n\nconst JSHandle_js_1 = require(\"./JSHandle.js\");\n/**\n * @public\n */\n\n\nexports.EVALUATION_SCRIPT_URL = '__puppeteer_evaluation_script__';\nconst SOURCE_URL_REGEX = /^[\\040\\t]*\\/\\/[@#] sourceURL=\\s*(\\S*?)\\s*$/m;\n/**\n * This class represents a context for JavaScript execution. A [Page] might have\n * many execution contexts:\n * - each\n *   {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe |\n *   frame } has \"default\" execution context that is always created after frame is\n *   attached to DOM. This context is returned by the\n *   {@link Frame.executionContext} method.\n * - {@link https://developer.chrome.com/extensions | Extension}'s content scripts\n *   create additional execution contexts.\n *\n * Besides pages, execution contexts can be found in\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API |\n * workers }.\n *\n * @public\n */\n\nclass ExecutionContext {\n  /**\n   * @internal\n   */\n  constructor(client, contextPayload, world) {\n    this._client = client;\n    this._world = world;\n    this._contextId = contextPayload.id;\n    this._contextName = contextPayload.name;\n  }\n  /**\n   * @remarks\n   *\n   * Not every execution context is associated with a frame. For\n   * example, workers and extensions have execution contexts that are not\n   * associated with frames.\n   *\n   * @returns The frame associated with this execution context.\n   */\n\n\n  frame() {\n    return this._world ? this._world.frame() : null;\n  }\n  /**\n   * @remarks\n   * If the function passed to the `executionContext.evaluate` returns a\n   * Promise, then `executionContext.evaluate` would wait for the promise to\n   * resolve and return its value. If the function passed to the\n   * `executionContext.evaluate` returns a non-serializable value, then\n   * `executionContext.evaluate` resolves to `undefined`. DevTools Protocol also\n   * supports transferring some additional values that are not serializable by\n   * `JSON`: `-0`, `NaN`, `Infinity`, `-Infinity`, and bigint literals.\n   *\n   *\n   * @example\n   * ```js\n   * const executionContext = await page.mainFrame().executionContext();\n   * const result = await executionContext.evaluate(() => Promise.resolve(8 * 7))* ;\n   * console.log(result); // prints \"56\"\n   * ```\n   *\n   * @example\n   * A string can also be passed in instead of a function.\n   *\n   * ```js\n   * console.log(await executionContext.evaluate('1 + 2')); // prints \"3\"\n   * ```\n   *\n   * @example\n   * {@link JSHandle} instances can be passed as arguments to the\n   * `executionContext.* evaluate`:\n   * ```js\n   * const oneHandle = await executionContext.evaluateHandle(() => 1);\n   * const twoHandle = await executionContext.evaluateHandle(() => 2);\n   * const result = await executionContext.evaluate(\n   *    (a, b) => a + b, oneHandle, * twoHandle\n   * );\n   * await oneHandle.dispose();\n   * await twoHandle.dispose();\n   * console.log(result); // prints '3'.\n   * ```\n   * @param pageFunction - a function to be evaluated in the `executionContext`\n   * @param args - argument to pass to the page function\n   *\n   * @returns A promise that resolves to the return value of the given function.\n   */\n\n\n  evaluate(pageFunction, ...args) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return yield _this._evaluateInternal(true, pageFunction, ...args);\n    })();\n  }\n  /**\n   * @remarks\n   * The only difference between `executionContext.evaluate` and\n   * `executionContext.evaluateHandle` is that `executionContext.evaluateHandle`\n   * returns an in-page object (a {@link JSHandle}).\n   * If the function passed to the `executionContext.evaluateHandle` returns a\n   * Promise, then `executionContext.evaluateHandle` would wait for the\n   * promise to resolve and return its value.\n   *\n   * @example\n   * ```js\n   * const context = await page.mainFrame().executionContext();\n   * const aHandle = await context.evaluateHandle(() => Promise.resolve(self));\n   * aHandle; // Handle for the global object.\n   * ```\n   *\n   * @example\n   * A string can also be passed in instead of a function.\n   *\n   * ```js\n   * // Handle for the '3' * object.\n   * const aHandle = await context.evaluateHandle('1 + 2');\n   * ```\n   *\n   * @example\n   * JSHandle instances can be passed as arguments\n   * to the `executionContext.* evaluateHandle`:\n   *\n   * ```js\n   * const aHandle = await context.evaluateHandle(() => document.body);\n   * const resultHandle = await context.evaluateHandle(body => body.innerHTML, * aHandle);\n   * console.log(await resultHandle.jsonValue()); // prints body's innerHTML\n   * await aHandle.dispose();\n   * await resultHandle.dispose();\n   * ```\n   *\n   * @param pageFunction - a function to be evaluated in the `executionContext`\n   * @param args - argument to pass to the page function\n   *\n   * @returns A promise that resolves to the return value of the given function\n   * as an in-page object (a {@link JSHandle}).\n   */\n\n\n  evaluateHandle(pageFunction, ...args) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this2._evaluateInternal(false, pageFunction, ...args);\n    })();\n  }\n\n  _evaluateInternal(returnByValue, pageFunction, ...args) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const suffix = `//# sourceURL=${exports.EVALUATION_SCRIPT_URL}`;\n\n      if (helper_js_1.helper.isString(pageFunction)) {\n        const contextId = _this3._contextId;\n        const expression = pageFunction;\n        const expressionWithSourceUrl = SOURCE_URL_REGEX.test(expression) ? expression : expression + '\\n' + suffix;\n        const {\n          exceptionDetails,\n          result: remoteObject\n        } = yield _this3._client.send('Runtime.evaluate', {\n          expression: expressionWithSourceUrl,\n          contextId,\n          returnByValue,\n          awaitPromise: true,\n          userGesture: true\n        }).catch(rewriteError);\n        if (exceptionDetails) throw new Error('Evaluation failed: ' + helper_js_1.helper.getExceptionMessage(exceptionDetails));\n        return returnByValue ? helper_js_1.helper.valueFromRemoteObject(remoteObject) : JSHandle_js_1.createJSHandle(_this3, remoteObject);\n      }\n\n      if (typeof pageFunction !== 'function') throw new Error(`Expected to get |string| or |function| as the first argument, but got \"${pageFunction}\" instead.`);\n      let functionText = pageFunction.toString();\n\n      try {\n        new Function('(' + functionText + ')');\n      } catch (error) {\n        // This means we might have a function shorthand. Try another\n        // time prefixing 'function '.\n        if (functionText.startsWith('async ')) functionText = 'async function ' + functionText.substring('async '.length);else functionText = 'function ' + functionText;\n\n        try {\n          new Function('(' + functionText + ')');\n        } catch (error) {\n          // We tried hard to serialize, but there's a weird beast here.\n          throw new Error('Passed function is not well-serializable!');\n        }\n      }\n\n      let callFunctionOnPromise;\n\n      try {\n        callFunctionOnPromise = _this3._client.send('Runtime.callFunctionOn', {\n          functionDeclaration: functionText + '\\n' + suffix + '\\n',\n          executionContextId: _this3._contextId,\n          arguments: args.map(convertArgument.bind(_this3)),\n          returnByValue,\n          awaitPromise: true,\n          userGesture: true\n        });\n      } catch (error) {\n        if (error instanceof TypeError && error.message.startsWith('Converting circular structure to JSON')) error.message += ' Are you passing a nested JSHandle?';\n        throw error;\n      }\n\n      const {\n        exceptionDetails,\n        result: remoteObject\n      } = yield callFunctionOnPromise.catch(rewriteError);\n      if (exceptionDetails) throw new Error('Evaluation failed: ' + helper_js_1.helper.getExceptionMessage(exceptionDetails));\n      return returnByValue ? helper_js_1.helper.valueFromRemoteObject(remoteObject) : JSHandle_js_1.createJSHandle(_this3, remoteObject);\n      /**\n       * @param {*} arg\n       * @returns {*}\n       * @this {ExecutionContext}\n       */\n\n      function convertArgument(arg) {\n        if (typeof arg === 'bigint') // eslint-disable-line valid-typeof\n          return {\n            unserializableValue: `${arg.toString()}n`\n          };\n        if (Object.is(arg, -0)) return {\n          unserializableValue: '-0'\n        };\n        if (Object.is(arg, Infinity)) return {\n          unserializableValue: 'Infinity'\n        };\n        if (Object.is(arg, -Infinity)) return {\n          unserializableValue: '-Infinity'\n        };\n        if (Object.is(arg, NaN)) return {\n          unserializableValue: 'NaN'\n        };\n        const objectHandle = arg && arg instanceof JSHandle_js_1.JSHandle ? arg : null;\n\n        if (objectHandle) {\n          if (objectHandle._context !== this) throw new Error('JSHandles can be evaluated only in the context they were created!');\n          if (objectHandle._disposed) throw new Error('JSHandle is disposed!');\n          if (objectHandle._remoteObject.unserializableValue) return {\n            unserializableValue: objectHandle._remoteObject.unserializableValue\n          };\n          if (!objectHandle._remoteObject.objectId) return {\n            value: objectHandle._remoteObject.value\n          };\n          return {\n            objectId: objectHandle._remoteObject.objectId\n          };\n        }\n\n        return {\n          value: arg\n        };\n      }\n\n      function rewriteError(error) {\n        if (error.message.includes('Object reference chain is too long')) return {\n          result: {\n            type: 'undefined'\n          }\n        };\n        if (error.message.includes(\"Object couldn't be returned by value\")) return {\n          result: {\n            type: 'undefined'\n          }\n        };\n        if (error.message.endsWith('Cannot find context with specified id') || error.message.endsWith('Inspected target navigated or closed')) throw new Error('Execution context was destroyed, most likely because of a navigation.');\n        throw error;\n      }\n    })();\n  }\n  /**\n   * This method iterates the JavaScript heap and finds all the objects with the\n   * given prototype.\n   * @remarks\n   * @example\n   * ```js\n   * // Create a Map object\n   * await page.evaluate(() => window.map = new Map());\n   * // Get a handle to the Map object prototype\n   * const mapPrototype = await page.evaluateHandle(() => Map.prototype);\n   * // Query all map instances into an array\n   * const mapInstances = await page.queryObjects(mapPrototype);\n   * // Count amount of map objects in heap\n   * const count = await page.evaluate(maps => maps.length, mapInstances);\n   * await mapInstances.dispose();\n   * await mapPrototype.dispose();\n   * ```\n   *\n   * @param prototypeHandle - a handle to the object prototype\n   *\n   * @returns A handle to an array of objects with the given prototype.\n   */\n\n\n  queryObjects(prototypeHandle) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      assert_js_1.assert(!prototypeHandle._disposed, 'Prototype JSHandle is disposed!');\n      assert_js_1.assert(prototypeHandle._remoteObject.objectId, 'Prototype JSHandle must not be referencing primitive value');\n      const response = yield _this4._client.send('Runtime.queryObjects', {\n        prototypeObjectId: prototypeHandle._remoteObject.objectId\n      });\n      return JSHandle_js_1.createJSHandle(_this4, response.objects);\n    })();\n  }\n  /**\n   * @internal\n   */\n\n\n  _adoptBackendNodeId(backendNodeId) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        object\n      } = yield _this5._client.send('DOM.resolveNode', {\n        backendNodeId: backendNodeId,\n        executionContextId: _this5._contextId\n      });\n      return JSHandle_js_1.createJSHandle(_this5, object);\n    })();\n  }\n  /**\n   * @internal\n   */\n\n\n  _adoptElementHandle(elementHandle) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      assert_js_1.assert(elementHandle.executionContext() !== _this6, 'Cannot adopt handle that already belongs to this execution context');\n      assert_js_1.assert(_this6._world, 'Cannot adopt handle without DOMWorld');\n      const nodeInfo = yield _this6._client.send('DOM.describeNode', {\n        objectId: elementHandle._remoteObject.objectId\n      });\n      return _this6._adoptBackendNodeId(nodeInfo.node.backendNodeId);\n    })();\n  }\n\n}\n\nexports.ExecutionContext = ExecutionContext;","map":{"version":3,"sources":["C:/Users/Matth/workspace/node_modules/puppeteer/lib/cjs/puppeteer/common/ExecutionContext.js"],"names":["Object","defineProperty","exports","value","ExecutionContext","EVALUATION_SCRIPT_URL","assert_js_1","require","helper_js_1","JSHandle_js_1","SOURCE_URL_REGEX","constructor","client","contextPayload","world","_client","_world","_contextId","id","_contextName","name","frame","evaluate","pageFunction","args","_evaluateInternal","evaluateHandle","returnByValue","suffix","helper","isString","contextId","expression","expressionWithSourceUrl","test","exceptionDetails","result","remoteObject","send","awaitPromise","userGesture","catch","rewriteError","Error","getExceptionMessage","valueFromRemoteObject","createJSHandle","functionText","toString","Function","error","startsWith","substring","length","callFunctionOnPromise","functionDeclaration","executionContextId","arguments","map","convertArgument","bind","TypeError","message","arg","unserializableValue","is","Infinity","NaN","objectHandle","JSHandle","_context","_disposed","_remoteObject","objectId","includes","type","endsWith","queryObjects","prototypeHandle","assert","response","prototypeObjectId","objects","_adoptBackendNodeId","backendNodeId","object","_adoptElementHandle","elementHandle","executionContext","nodeInfo","node"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,gBAAR,GAA2BF,OAAO,CAACG,qBAAR,GAAgC,KAAK,CAAhE;;AACA,MAAMC,WAAW,GAAGC,OAAO,CAAC,aAAD,CAA3B;;AACA,MAAMC,WAAW,GAAGD,OAAO,CAAC,aAAD,CAA3B;;AACA,MAAME,aAAa,GAAGF,OAAO,CAAC,eAAD,CAA7B;AACA;AACA;AACA;;;AACAL,OAAO,CAACG,qBAAR,GAAgC,iCAAhC;AACA,MAAMK,gBAAgB,GAAG,6CAAzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMN,gBAAN,CAAuB;AACnB;AACJ;AACA;AACIO,EAAAA,WAAW,CAACC,MAAD,EAASC,cAAT,EAAyBC,KAAzB,EAAgC;AACvC,SAAKC,OAAL,GAAeH,MAAf;AACA,SAAKI,MAAL,GAAcF,KAAd;AACA,SAAKG,UAAL,GAAkBJ,cAAc,CAACK,EAAjC;AACA,SAAKC,YAAL,GAAoBN,cAAc,CAACO,IAAnC;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,KAAK,GAAG;AACJ,WAAO,KAAKL,MAAL,GAAc,KAAKA,MAAL,CAAYK,KAAZ,EAAd,GAAoC,IAA3C;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACUC,EAAAA,QAAQ,CAACC,YAAD,EAAe,GAAGC,IAAlB,EAAwB;AAAA;;AAAA;AAClC,mBAAa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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ExecutionContext = exports.EVALUATION_SCRIPT_URL = void 0;\nconst assert_js_1 = require(\"./assert.js\");\nconst helper_js_1 = require(\"./helper.js\");\nconst JSHandle_js_1 = require(\"./JSHandle.js\");\n/**\n * @public\n */\nexports.EVALUATION_SCRIPT_URL = '__puppeteer_evaluation_script__';\nconst SOURCE_URL_REGEX = /^[\\040\\t]*\\/\\/[@#] sourceURL=\\s*(\\S*?)\\s*$/m;\n/**\n * This class represents a context for JavaScript execution. A [Page] might have\n * many execution contexts:\n * - each\n *   {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe |\n *   frame } has \"default\" execution context that is always created after frame is\n *   attached to DOM. This context is returned by the\n *   {@link Frame.executionContext} method.\n * - {@link https://developer.chrome.com/extensions | Extension}'s content scripts\n *   create additional execution contexts.\n *\n * Besides pages, execution contexts can be found in\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API |\n * workers }.\n *\n * @public\n */\nclass ExecutionContext {\n    /**\n     * @internal\n     */\n    constructor(client, contextPayload, world) {\n        this._client = client;\n        this._world = world;\n        this._contextId = contextPayload.id;\n        this._contextName = contextPayload.name;\n    }\n    /**\n     * @remarks\n     *\n     * Not every execution context is associated with a frame. For\n     * example, workers and extensions have execution contexts that are not\n     * associated with frames.\n     *\n     * @returns The frame associated with this execution context.\n     */\n    frame() {\n        return this._world ? this._world.frame() : null;\n    }\n    /**\n     * @remarks\n     * If the function passed to the `executionContext.evaluate` returns a\n     * Promise, then `executionContext.evaluate` would wait for the promise to\n     * resolve and return its value. If the function passed to the\n     * `executionContext.evaluate` returns a non-serializable value, then\n     * `executionContext.evaluate` resolves to `undefined`. DevTools Protocol also\n     * supports transferring some additional values that are not serializable by\n     * `JSON`: `-0`, `NaN`, `Infinity`, `-Infinity`, and bigint literals.\n     *\n     *\n     * @example\n     * ```js\n     * const executionContext = await page.mainFrame().executionContext();\n     * const result = await executionContext.evaluate(() => Promise.resolve(8 * 7))* ;\n     * console.log(result); // prints \"56\"\n     * ```\n     *\n     * @example\n     * A string can also be passed in instead of a function.\n     *\n     * ```js\n     * console.log(await executionContext.evaluate('1 + 2')); // prints \"3\"\n     * ```\n     *\n     * @example\n     * {@link JSHandle} instances can be passed as arguments to the\n     * `executionContext.* evaluate`:\n     * ```js\n     * const oneHandle = await executionContext.evaluateHandle(() => 1);\n     * const twoHandle = await executionContext.evaluateHandle(() => 2);\n     * const result = await executionContext.evaluate(\n     *    (a, b) => a + b, oneHandle, * twoHandle\n     * );\n     * await oneHandle.dispose();\n     * await twoHandle.dispose();\n     * console.log(result); // prints '3'.\n     * ```\n     * @param pageFunction - a function to be evaluated in the `executionContext`\n     * @param args - argument to pass to the page function\n     *\n     * @returns A promise that resolves to the return value of the given function.\n     */\n    async evaluate(pageFunction, ...args) {\n        return await this._evaluateInternal(true, pageFunction, ...args);\n    }\n    /**\n     * @remarks\n     * The only difference between `executionContext.evaluate` and\n     * `executionContext.evaluateHandle` is that `executionContext.evaluateHandle`\n     * returns an in-page object (a {@link JSHandle}).\n     * If the function passed to the `executionContext.evaluateHandle` returns a\n     * Promise, then `executionContext.evaluateHandle` would wait for the\n     * promise to resolve and return its value.\n     *\n     * @example\n     * ```js\n     * const context = await page.mainFrame().executionContext();\n     * const aHandle = await context.evaluateHandle(() => Promise.resolve(self));\n     * aHandle; // Handle for the global object.\n     * ```\n     *\n     * @example\n     * A string can also be passed in instead of a function.\n     *\n     * ```js\n     * // Handle for the '3' * object.\n     * const aHandle = await context.evaluateHandle('1 + 2');\n     * ```\n     *\n     * @example\n     * JSHandle instances can be passed as arguments\n     * to the `executionContext.* evaluateHandle`:\n     *\n     * ```js\n     * const aHandle = await context.evaluateHandle(() => document.body);\n     * const resultHandle = await context.evaluateHandle(body => body.innerHTML, * aHandle);\n     * console.log(await resultHandle.jsonValue()); // prints body's innerHTML\n     * await aHandle.dispose();\n     * await resultHandle.dispose();\n     * ```\n     *\n     * @param pageFunction - a function to be evaluated in the `executionContext`\n     * @param args - argument to pass to the page function\n     *\n     * @returns A promise that resolves to the return value of the given function\n     * as an in-page object (a {@link JSHandle}).\n     */\n    async evaluateHandle(pageFunction, ...args) {\n        return this._evaluateInternal(false, pageFunction, ...args);\n    }\n    async _evaluateInternal(returnByValue, pageFunction, ...args) {\n        const suffix = `//# sourceURL=${exports.EVALUATION_SCRIPT_URL}`;\n        if (helper_js_1.helper.isString(pageFunction)) {\n            const contextId = this._contextId;\n            const expression = pageFunction;\n            const expressionWithSourceUrl = SOURCE_URL_REGEX.test(expression)\n                ? expression\n                : expression + '\\n' + suffix;\n            const { exceptionDetails, result: remoteObject } = await this._client\n                .send('Runtime.evaluate', {\n                expression: expressionWithSourceUrl,\n                contextId,\n                returnByValue,\n                awaitPromise: true,\n                userGesture: true,\n            })\n                .catch(rewriteError);\n            if (exceptionDetails)\n                throw new Error('Evaluation failed: ' + helper_js_1.helper.getExceptionMessage(exceptionDetails));\n            return returnByValue\n                ? helper_js_1.helper.valueFromRemoteObject(remoteObject)\n                : JSHandle_js_1.createJSHandle(this, remoteObject);\n        }\n        if (typeof pageFunction !== 'function')\n            throw new Error(`Expected to get |string| or |function| as the first argument, but got \"${pageFunction}\" instead.`);\n        let functionText = pageFunction.toString();\n        try {\n            new Function('(' + functionText + ')');\n        }\n        catch (error) {\n            // This means we might have a function shorthand. Try another\n            // time prefixing 'function '.\n            if (functionText.startsWith('async '))\n                functionText =\n                    'async function ' + functionText.substring('async '.length);\n            else\n                functionText = 'function ' + functionText;\n            try {\n                new Function('(' + functionText + ')');\n            }\n            catch (error) {\n                // We tried hard to serialize, but there's a weird beast here.\n                throw new Error('Passed function is not well-serializable!');\n            }\n        }\n        let callFunctionOnPromise;\n        try {\n            callFunctionOnPromise = this._client.send('Runtime.callFunctionOn', {\n                functionDeclaration: functionText + '\\n' + suffix + '\\n',\n                executionContextId: this._contextId,\n                arguments: args.map(convertArgument.bind(this)),\n                returnByValue,\n                awaitPromise: true,\n                userGesture: true,\n            });\n        }\n        catch (error) {\n            if (error instanceof TypeError &&\n                error.message.startsWith('Converting circular structure to JSON'))\n                error.message += ' Are you passing a nested JSHandle?';\n            throw error;\n        }\n        const { exceptionDetails, result: remoteObject } = await callFunctionOnPromise.catch(rewriteError);\n        if (exceptionDetails)\n            throw new Error('Evaluation failed: ' + helper_js_1.helper.getExceptionMessage(exceptionDetails));\n        return returnByValue\n            ? helper_js_1.helper.valueFromRemoteObject(remoteObject)\n            : JSHandle_js_1.createJSHandle(this, remoteObject);\n        /**\n         * @param {*} arg\n         * @returns {*}\n         * @this {ExecutionContext}\n         */\n        function convertArgument(arg) {\n            if (typeof arg === 'bigint')\n                // eslint-disable-line valid-typeof\n                return { unserializableValue: `${arg.toString()}n` };\n            if (Object.is(arg, -0))\n                return { unserializableValue: '-0' };\n            if (Object.is(arg, Infinity))\n                return { unserializableValue: 'Infinity' };\n            if (Object.is(arg, -Infinity))\n                return { unserializableValue: '-Infinity' };\n            if (Object.is(arg, NaN))\n                return { unserializableValue: 'NaN' };\n            const objectHandle = arg && arg instanceof JSHandle_js_1.JSHandle ? arg : null;\n            if (objectHandle) {\n                if (objectHandle._context !== this)\n                    throw new Error('JSHandles can be evaluated only in the context they were created!');\n                if (objectHandle._disposed)\n                    throw new Error('JSHandle is disposed!');\n                if (objectHandle._remoteObject.unserializableValue)\n                    return {\n                        unserializableValue: objectHandle._remoteObject.unserializableValue,\n                    };\n                if (!objectHandle._remoteObject.objectId)\n                    return { value: objectHandle._remoteObject.value };\n                return { objectId: objectHandle._remoteObject.objectId };\n            }\n            return { value: arg };\n        }\n        function rewriteError(error) {\n            if (error.message.includes('Object reference chain is too long'))\n                return { result: { type: 'undefined' } };\n            if (error.message.includes(\"Object couldn't be returned by value\"))\n                return { result: { type: 'undefined' } };\n            if (error.message.endsWith('Cannot find context with specified id') ||\n                error.message.endsWith('Inspected target navigated or closed'))\n                throw new Error('Execution context was destroyed, most likely because of a navigation.');\n            throw error;\n        }\n    }\n    /**\n     * This method iterates the JavaScript heap and finds all the objects with the\n     * given prototype.\n     * @remarks\n     * @example\n     * ```js\n     * // Create a Map object\n     * await page.evaluate(() => window.map = new Map());\n     * // Get a handle to the Map object prototype\n     * const mapPrototype = await page.evaluateHandle(() => Map.prototype);\n     * // Query all map instances into an array\n     * const mapInstances = await page.queryObjects(mapPrototype);\n     * // Count amount of map objects in heap\n     * const count = await page.evaluate(maps => maps.length, mapInstances);\n     * await mapInstances.dispose();\n     * await mapPrototype.dispose();\n     * ```\n     *\n     * @param prototypeHandle - a handle to the object prototype\n     *\n     * @returns A handle to an array of objects with the given prototype.\n     */\n    async queryObjects(prototypeHandle) {\n        assert_js_1.assert(!prototypeHandle._disposed, 'Prototype JSHandle is disposed!');\n        assert_js_1.assert(prototypeHandle._remoteObject.objectId, 'Prototype JSHandle must not be referencing primitive value');\n        const response = await this._client.send('Runtime.queryObjects', {\n            prototypeObjectId: prototypeHandle._remoteObject.objectId,\n        });\n        return JSHandle_js_1.createJSHandle(this, response.objects);\n    }\n    /**\n     * @internal\n     */\n    async _adoptBackendNodeId(backendNodeId) {\n        const { object } = await this._client.send('DOM.resolveNode', {\n            backendNodeId: backendNodeId,\n            executionContextId: this._contextId,\n        });\n        return JSHandle_js_1.createJSHandle(this, object);\n    }\n    /**\n     * @internal\n     */\n    async _adoptElementHandle(elementHandle) {\n        assert_js_1.assert(elementHandle.executionContext() !== this, 'Cannot adopt handle that already belongs to this execution context');\n        assert_js_1.assert(this._world, 'Cannot adopt handle without DOMWorld');\n        const nodeInfo = await this._client.send('DOM.describeNode', {\n            objectId: elementHandle._remoteObject.objectId,\n        });\n        return this._adoptBackendNodeId(nodeInfo.node.backendNodeId);\n    }\n}\nexports.ExecutionContext = ExecutionContext;\n"]},"metadata":{},"sourceType":"script"}