{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\Matth\\\\workspace\\\\angular-ecommerce\\\\client\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Dialog = void 0;\n\nconst assert_js_1 = require(\"./assert.js\");\n/**\n * Dialog instances are dispatched by the {@link Page} via the `dialog` event.\n *\n * @remarks\n *\n * @example\n * ```js\n * const puppeteer = require('puppeteer');\n *\n * (async () => {\n *   const browser = await puppeteer.launch();\n *   const page = await browser.newPage();\n *   page.on('dialog', async dialog => {\n *     console.log(dialog.message());\n *     await dialog.dismiss();\n *     await browser.close();\n *   });\n *   page.evaluate(() => alert('1'));\n * })();\n * ```\n * @public\n */\n\n\nclass Dialog {\n  /**\n   * @internal\n   */\n  constructor(client, type, message, defaultValue = '') {\n    this._handled = false;\n    this._client = client;\n    this._type = type;\n    this._message = message;\n    this._defaultValue = defaultValue;\n  }\n  /**\n   * @returns The type of the dialog.\n   */\n\n\n  type() {\n    return this._type;\n  }\n  /**\n   * @returns The message displayed in the dialog.\n   */\n\n\n  message() {\n    return this._message;\n  }\n  /**\n   * @returns The default value of the prompt, or an empty string if the dialog\n   * is not a `prompt`.\n   */\n\n\n  defaultValue() {\n    return this._defaultValue;\n  }\n  /**\n   * @param promptText - optional text that will be entered in the dialog\n   * prompt. Has no effect if the dialog's type is not `prompt`.\n   *\n   * @returns A promise that resolves when the dialog has been accepted.\n   */\n\n\n  accept(promptText) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      assert_js_1.assert(!_this._handled, 'Cannot accept dialog which is already handled!');\n      _this._handled = true;\n      yield _this._client.send('Page.handleJavaScriptDialog', {\n        accept: true,\n        promptText: promptText\n      });\n    })();\n  }\n  /**\n   * @returns A promise which will resolve once the dialog has been dismissed\n   */\n\n\n  dismiss() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      assert_js_1.assert(!_this2._handled, 'Cannot dismiss dialog which is already handled!');\n      _this2._handled = true;\n      yield _this2._client.send('Page.handleJavaScriptDialog', {\n        accept: false\n      });\n    })();\n  }\n\n}\n\nexports.Dialog = Dialog;","map":{"version":3,"sources":["C:/Users/Matth/workspace/node_modules/puppeteer/lib/cjs/puppeteer/common/Dialog.js"],"names":["Object","defineProperty","exports","value","Dialog","assert_js_1","require","constructor","client","type","message","defaultValue","_handled","_client","_type","_message","_defaultValue","accept","promptText","assert","send","dismiss"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,MAAR,GAAiB,KAAK,CAAtB;;AACA,MAAMC,WAAW,GAAGC,OAAO,CAAC,aAAD,CAA3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMF,MAAN,CAAa;AACT;AACJ;AACA;AACIG,EAAAA,WAAW,CAACC,MAAD,EAASC,IAAT,EAAeC,OAAf,EAAwBC,YAAY,GAAG,EAAvC,EAA2C;AAClD,SAAKC,QAAL,GAAgB,KAAhB;AACA,SAAKC,OAAL,GAAeL,MAAf;AACA,SAAKM,KAAL,GAAaL,IAAb;AACA,SAAKM,QAAL,GAAgBL,OAAhB;AACA,SAAKM,aAAL,GAAqBL,YAArB;AACH;AACD;AACJ;AACA;;;AACIF,EAAAA,IAAI,GAAG;AACH,WAAO,KAAKK,KAAZ;AACH;AACD;AACJ;AACA;;;AACIJ,EAAAA,OAAO,GAAG;AACN,WAAO,KAAKK,QAAZ;AACH;AACD;AACJ;AACA;AACA;;;AACIJ,EAAAA,YAAY,GAAG;AACX,WAAO,KAAKK,aAAZ;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACUC,EAAAA,MAAM,CAACC,UAAD,EAAa;AAAA;;AAAA;AACrBb,MAAAA,WAAW,CAACc,MAAZ,CAAmB,CAAC,KAAI,CAACP,QAAzB,EAAmC,gDAAnC;AACA,MAAA,KAAI,CAACA,QAAL,GAAgB,IAAhB;AACA,YAAM,KAAI,CAACC,OAAL,CAAaO,IAAb,CAAkB,6BAAlB,EAAiD;AACnDH,QAAAA,MAAM,EAAE,IAD2C;AAEnDC,QAAAA,UAAU,EAAEA;AAFuC,OAAjD,CAAN;AAHqB;AAOxB;AACD;AACJ;AACA;;;AACUG,EAAAA,OAAO,GAAG;AAAA;;AAAA;AACZhB,MAAAA,WAAW,CAACc,MAAZ,CAAmB,CAAC,MAAI,CAACP,QAAzB,EAAmC,iDAAnC;AACA,MAAA,MAAI,CAACA,QAAL,GAAgB,IAAhB;AACA,YAAM,MAAI,CAACC,OAAL,CAAaO,IAAb,CAAkB,6BAAlB,EAAiD;AACnDH,QAAAA,MAAM,EAAE;AAD2C,OAAjD,CAAN;AAHY;AAMf;;AArDQ;;AAuDbf,OAAO,CAACE,MAAR,GAAiBA,MAAjB","sourcesContent":["\"use strict\";\n/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Dialog = void 0;\nconst assert_js_1 = require(\"./assert.js\");\n/**\n * Dialog instances are dispatched by the {@link Page} via the `dialog` event.\n *\n * @remarks\n *\n * @example\n * ```js\n * const puppeteer = require('puppeteer');\n *\n * (async () => {\n *   const browser = await puppeteer.launch();\n *   const page = await browser.newPage();\n *   page.on('dialog', async dialog => {\n *     console.log(dialog.message());\n *     await dialog.dismiss();\n *     await browser.close();\n *   });\n *   page.evaluate(() => alert('1'));\n * })();\n * ```\n * @public\n */\nclass Dialog {\n    /**\n     * @internal\n     */\n    constructor(client, type, message, defaultValue = '') {\n        this._handled = false;\n        this._client = client;\n        this._type = type;\n        this._message = message;\n        this._defaultValue = defaultValue;\n    }\n    /**\n     * @returns The type of the dialog.\n     */\n    type() {\n        return this._type;\n    }\n    /**\n     * @returns The message displayed in the dialog.\n     */\n    message() {\n        return this._message;\n    }\n    /**\n     * @returns The default value of the prompt, or an empty string if the dialog\n     * is not a `prompt`.\n     */\n    defaultValue() {\n        return this._defaultValue;\n    }\n    /**\n     * @param promptText - optional text that will be entered in the dialog\n     * prompt. Has no effect if the dialog's type is not `prompt`.\n     *\n     * @returns A promise that resolves when the dialog has been accepted.\n     */\n    async accept(promptText) {\n        assert_js_1.assert(!this._handled, 'Cannot accept dialog which is already handled!');\n        this._handled = true;\n        await this._client.send('Page.handleJavaScriptDialog', {\n            accept: true,\n            promptText: promptText,\n        });\n    }\n    /**\n     * @returns A promise which will resolve once the dialog has been dismissed\n     */\n    async dismiss() {\n        assert_js_1.assert(!this._handled, 'Cannot dismiss dialog which is already handled!');\n        this._handled = true;\n        await this._client.send('Page.handleJavaScriptDialog', {\n            accept: false,\n        });\n    }\n}\nexports.Dialog = Dialog;\n"]},"metadata":{},"sourceType":"script"}